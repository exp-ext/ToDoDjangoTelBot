version: '3.9'

services:
  minio:
    image: minio/minio:latest
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
      - ./certbot/conf/:/etc/letsencrypt/:rw
      - ./certbot/www/:/var/lib/letsencrypt/:rw
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  createbuckets:
    image: minio/mc:latest
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio ${AWS_S3_ENDPOINT_URL} ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
      /usr/bin/mc mb minio/${AWS_STORAGE_BUCKET_NAME};
      exit 0;
      "
    volumes:
      - minio_data:/data
    env_file:
      - ./.env
    depends_on:
      minio:
        condition: service_healthy

  db:
    image: postgres:13.10-alpine
    container_name: todo_db
    restart: unless-stopped
    volumes:
      - postgresql_volume:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    env_file:
      - ./.env

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: todo_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.ru
      PGADMIN_DEFAULT_PASSWORD: admin_password
    ports:
      - 8090:80
    volumes:
      - pgadmin_data_todo:/var/lib/pgadmin/

  redis:
    image: redis:latest
    container_name: todo_redis
    restart: always
    command: >
          --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  celery:
    build:
      context: ../todo/
      dockerfile: Dockerfile
    container_name: todo_celery
    restart: always
    command: bash -c "celery -A todo worker --loglevel=INFO"
    volumes:      
      - ../backup:/app/backup/:rw
      - ../todo/:/app/:rw
      - cache_pip_volume:/root/.cache/pip/:rw
      - cache_apt_volume:/var/cache/apt/archives/:rw
    env_file:
      - ./.env
    depends_on:
      - redis
      - db

  celery-beat:
    build:
      context: ../todo/
      dockerfile: Dockerfile 
    container_name: todo_beat
    restart: always
    command: bash -c "celery -A todo beat -l info --scheduler django_celery_beat.schedulers.DatabaseScheduler"
    volumes:
      - ../backup:/app/backup/:rw
      - ../todo/:/app/:rw
      - cache_pip_volume:/root/.cache/pip/:rw
      - cache_apt_volume:/var/cache/apt/archives/:rw
    env_file:
      - ./.env
    depends_on:
      - redis
      - db
      - celery

  whisper:
    image: onerahmet/openai-whisper-asr-webservice:latest
    container_name: todo_whisper
    expose:
      - "9090:9090"
    environment:
      - ASR_MODEL=base
    volumes:
      - whisper_volume:/root/.cache/whisper

  nginx:
    image: nginx:latest
    container_name: todo_nginx
    volumes:
      - ./nginx/default_dev.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    network_mode: host

volumes:
  backup_volume:
  postgresql_volume:
  cache_pip_volume:
  cache_apt_volume:
  whisper_volume:
  pgadmin_data_todo:
  minio_data:
