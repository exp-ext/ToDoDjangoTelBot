version: '3.9'

services:

  minio:
    image: minio/minio:latest
    container_name: todo-minio
    command: server --console-address ":9001" /${AWS_STORAGE_BUCKET_NAME}
    ports:
      - "9000:9000"
      - "${MINIO_PORT}:9001"
    volumes:
      - minio_data:/${AWS_STORAGE_BUCKET_NAME}
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  createbuckets:
    image: minio/mc
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} --api S3v4;
      /usr/bin/mc mb minio/${AWS_STORAGE_BUCKET_NAME};
      exit 0;
      "
    volumes:
      - minio_data:/data
    env_file:
      - ./.env
    depends_on:
      minio:
        condition: service_healthy

  db:
    image: postgres:13.10-alpine
    container_name: todo_db
    restart: unless-stopped
    volumes:
      - postgresql_volume:/var/lib/postgresql/data/
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: todo_redis
    restart: always
    command: >
          --requirepass ${REDIS_PASSWORD}
    expose:
      - 6379
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: ../todo
      dockerfile: Dockerfile
      args:
        DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
    container_name: todo_django
    restart: always
    command: ./config/webtodo/entrypoint.sh
    volumes:
      - static_volume:/app/static/:rw
      - media_volume:/app/media/:rw
      - backup_volume:/app/backup/:rw
      - cache_pip_volume:/root/.cache/pip/:rw
      - cache_apt_volume:/var/cache/apt/archives/:rw
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy

  celery:
    build:
      context: ../todo
      dockerfile: Dockerfile
    container_name: todo_celery
    restart: always
    command: ./config/webtodo/celery-entrypoint.sh
    volumes:
      - static_volume:/app/static/:rw
      - media_volume:/app/media/:rw
      - backup_volume:/app/backup/:rw
      - cache_pip_volume:/root/.cache/pip/:rw
      - cache_apt_volume:/var/cache/apt/archives/:rw
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy

  celery-beat:
    build:
      context: ../todo
      dockerfile: Dockerfile
    container_name: todo_beat
    restart: always
    command: ./config/webtodo/beat-entrypoint.sh
    volumes:
      - static_volume:/app/static/:rw
      - media_volume:/app/media/:rw
      - backup_volume:/app/backup/:rw
      - cache_pip_volume:/root/.cache/pip/:rw
      - cache_apt_volume:/var/cache/apt/archives/:rw
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy

  nginx:
    image: nginx:latest
    container_name: todo_nginx
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/conf/:/etc/letsencrypt/:rw
      - ./certbot/www/:/var/lib/letsencrypt/:rw
      - static_volume:/var/html/static/:rw
      - media_volume:/var/html/media/:rw
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web

  certbot:
    image: certbot/certbot
    container_name: todo_certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf/:/etc/letsencrypt/:rw
      - ./certbot/www/:/var/lib/letsencrypt/:rw
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx

  whisper:
    image: onerahmet/openai-whisper-asr-webservice:latest
    container_name: todo_whisper
    ports:
      - "9090:9000"
    environment:
      - ASR_MODEL=base
    volumes:
      - whisper_volume:/root/.cache/whisper

volumes:
  postgresql_volume:
  backup_volume:
  cache_pip_volume:
  cache_apt_volume:
  whisper_volume:
  minio_data:
  static_volume:
  media_volume:
