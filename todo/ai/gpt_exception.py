import traceback


class LogTracebackExceptionError(Exception):
    """–ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è traceback."""
    def __init__(self, message, log_traceback=True):
        super().__init__(message)
        self.log_traceback = log_traceback


class InWorkError(LogTracebackExceptionError):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º–æ–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ."""
    pass


class LongQueryError(LogTracebackExceptionError):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π."""
    def __init__(self, message="–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∫–æ—Ä–æ—á–µ."):
        self.message = message
        super().__init__(self.message)


class UnhandledError(LogTracebackExceptionError):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫."""
    pass


class OpenAIRequestError(LogTracebackExceptionError):
    """–û—à–∏–±–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ OpenAI."""
    pass


class OpenAIResponseError(OpenAIRequestError):
    """–û—à–∏–±–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –æ—Ç OpenAI."""
    pass


class OpenAIConnectionError(OpenAIRequestError):
    """–û—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö –∫ OpenAI."""
    pass


class OpenAIJSONDecodeError(OpenAIRequestError):
    """–û—à–∏–±–∫–∏ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ OpenAI."""
    pass


class ValueChoicesError(OpenAIRequestError):
    """–û—à–∏–±–∫–∏ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞."""
    pass


async def handle_exceptions(err: Exception, need_traceback: bool = False) -> tuple[str, type, str]:
    traceback_str = ''
    traceback_err = traceback.format_exc()
    user_error_text = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑üèº\n–í–æ–∑–º–æ–∂–Ω–æ –±–æ–ª—å—à–æ–π –Ω–∞–ø–ª—ã–≤ –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è –Ω–µ —É—Å–ø–µ–≤–∞—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ü§Ø'
    error_messages = {
        InWorkError: lambda e: '–Ø –µ—â—ë –¥—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.',
        LongQueryError: lambda e: str(e),
        ValueChoicesError: lambda e: user_error_text,
        OpenAIResponseError: lambda e: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ —É—Å—Ç–∞–ª–∞.',
        OpenAIConnectionError: lambda e: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –í–µ—Ä–æ—è—Ç–Ω–æ –ò–ò –≤—ã—à–ª–∞ –Ω–µ–Ω–∞–¥–æ–ª–≥–æ.',
        OpenAIJSONDecodeError: lambda e: user_error_text,
        UnhandledError: lambda e: user_error_text,
    }
    error_message = error_messages.get(type(err), lambda e: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")(err)
    if hasattr(err, 'log_traceback') and err.log_traceback:
        err.log_traceback = need_traceback
        traceback_str = f'\n\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{traceback_err[-1024:]}'
    elif need_traceback:
        traceback_str = f'\n\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{traceback_err[-1024:]}'
    return error_message, type(err), traceback_str
