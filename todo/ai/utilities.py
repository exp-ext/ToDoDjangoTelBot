import markdown
from ai.gpt_exception import (LongQueryError, OpenAIConnectionError,
                              OpenAIJSONDecodeError, OpenAIResponseError,
                              UnhandledError)
from ai.gpt_query import GetAnswerGPT
from channels.generic.websocket import AsyncWebsocketConsumer
from django.conf import settings
from django.db.models import Model
from telbot.loader import bot
from telbot.models import HistoryAI

ADMIN_ID = settings.TELEGRAM_ADMIN_ID


class WSAnswerChatGPT(GetAnswerGPT):
    MAX_TYPING_TIME = 3

    def __init__(self, channel_layer: AsyncWebsocketConsumer, room_group_name: str, user: Model, query_text: str, message_count: int) -> None:
        assist_prompt = self.init_model_prompt()
        history_model = HistoryAI
        super().__init__(query_text, assist_prompt, user, history_model)
        self.channel_layer = channel_layer
        self.room_group_name = room_group_name
        self.message_count = message_count

    async def answer_from_ai(self) -> dict:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞."""
        try:
            await self.get_answer_chat_gpt()
        except Exception as err:
            user_error_text = (
                '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑üèº\n'
                '–í–æ–∑–º–æ–∂–Ω–æ –±–æ–ª—å—à–æ–π –Ω–∞–ø–ª—ã–≤ –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è –Ω–µ —É—Å–ø–µ–≤–∞—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ü§Ø'
            )
            error_messages = {
                LongQueryError: lambda e: str(e),
                OpenAIResponseError: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ —É—Å—Ç–∞–ª–∞.',
                OpenAIConnectionError: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –í–µ—Ä–æ—è—Ç–Ω–æ –ò–ò –≤—ã—à–ª–∞ –Ω–µ–Ω–∞–¥–æ–ª–≥–æ.',
                OpenAIJSONDecodeError: user_error_text,
                UnhandledError: user_error_text,
            }
            self.return_text = str(error_messages.get(type(err)))

            await self.handle_error(f'–û—à–∏–±–∫–∞ –≤ `GetAnswerGPT.answer_from_ai()`: {str(err)}')
        finally:
            if self.user.is_anonymous and self.message_count == 1:
                welcome_text = (
                    '–° –±–æ–ª—å—à–æ–π —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è! üåü\n'
                    '–ó–∞–≤–µ—Ä—à–∏–≤ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: '
                    '–≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥ —Å –ò–ò –ï–≤–∞. –≠—Ç–æ –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —ç—Ç–æ —Ü–µ–ª—ã–π –Ω–æ–≤—ã–π –º–∏—Ä, '
                    '–≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è, —É—á–∏—Ç—å—Å—è –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å. –í–∞—à –¥–∏–∞–ª–æ–≥ –±—É–¥–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, '
                    '—á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ª–µ–≥–∫–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ —Å–∞–π—Ç–∞. '
                )
                await self.send_chat_message(welcome_text)

            await self.send_chat_message(self.return_text)

    async def send_chat_message(self, message):
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'chat.message',
                'message': markdown.markdown(message, extensions=['fenced_code']),
                'username': 'Eva',
            }
        )

    async def handle_error(self, err):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫."""
        error_message = f"–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ –°–∞–π—Ç-ChatGPT:\n{err}"
        bot.send_message(ADMIN_ID, error_message)

    def init_model_prompt(self):
        return (
            'You are named Eva, an experienced senior software developer with a strong background in team leadership, '
            'mentoring all developers, and delivering high-quality software solutions to clients. Your primary language is Russian.'
        )
