import httpx
from ai.gpt_exception import (OpenAIConnectionError, OpenAIResponseError,
                              UnhandledError, handle_exceptions)
from ai.gpt_query import GetAnswerGPT
from asgiref.sync import sync_to_async
from channels.generic.websocket import AsyncWebsocketConsumer
from django.conf import settings
from django.db.models import Model
from httpx_socks import AsyncProxyTransport
from openai import AsyncOpenAI
from telbot.loader import bot
from telbot.models import HistoryAI

ADMIN_ID = settings.TELEGRAM_ADMIN_ID


class WSAnswerChatGPT(GetAnswerGPT):
    MAX_TYPING_TIME = 3

    def __init__(self, channel_layer: AsyncWebsocketConsumer, room_group_name: str, user: Model, query_text: str, message_count: int) -> None:
        assist_prompt = self.init_model_prompt()
        history_model = HistoryAI
        creativity_controls = {
            'temperature': 0.7,
            'top_p': 0.9,
            'frequency_penalty': 0,
            'presence_penalty': 0,
        }
        super().__init__(query_text, assist_prompt, user, history_model, creativity_controls=creativity_controls)
        self.channel_layer = channel_layer
        self.room_group_name = room_group_name
        self.message_count = message_count

    async def answer_from_ai(self) -> dict:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞."""
        try:
            await self.get_answer_chat_gpt()
        except Exception as err:
            self.return_text, *_ = await handle_exceptions(err, True)
            await self.handle_error(f'–û—à–∏–±–∫–∞ –≤ `GetAnswerGPT.answer_from_ai()`: {str(err)}')
        finally:
            if self.user.is_anonymous and self.message_count == 1:
                welcome_text = (
                    '–° –±–æ–ª—å—à–æ–π —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è! üåü\n'
                    '–ó–∞–≤–µ—Ä—à–∏–≤ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: '
                    '–≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥ —Å –ò–ò –ï–≤–∞. –≠—Ç–æ –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —ç—Ç–æ —Ü–µ–ª—ã–π –Ω–æ–≤—ã–π –º–∏—Ä, '
                    '–≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è, —É—á–∏—Ç—å—Å—è –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å. –í–∞—à –¥–∏–∞–ª–æ–≥ –±—É–¥–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, '
                    '—á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ª–µ–≥–∫–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ —Å–∞–π—Ç–∞. '
                )
                await self.send_chat_message(welcome_text)

    async def send_chat_message(self, message):
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'chat.message',
                'message': message,
                'username': 'Eva',
            }
        )

    async def httpx_request_to_openai(self) -> None:
        """–î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ OpenAI –∏ –≤—ã–∫–ª—é—á–∞–µ—Ç typing."""
        try:
            proxy_transport = AsyncProxyTransport.from_url(settings.SOCKS5)
            async with httpx.AsyncClient(transport=proxy_transport) as transport:
                client = AsyncOpenAI(
                    api_key=self.model.token,
                    http_client=transport,
                )
                stream = await client.chat.completions.create(
                    model=self.model.title,
                    messages=self.all_prompt,
                    stream=True,
                    **self.creativity_controls
                )
                first_chunk = True
                async for chunk in stream:
                    self.return_text += chunk.choices[0].delta.content or ""
                    await self.send_chunk_to_websocket(self.return_text, is_start=first_chunk, is_end=False)
                    if first_chunk:
                        first_chunk = False
                await self.send_chunk_to_websocket("", is_end=True)
                self.return_text_tokens = await self.num_tokens(self.return_text, 0)

        except httpx.HTTPStatusError as http_err:
            raise OpenAIResponseError(f'`WSAnswerChatGPT`, –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –±—ã–ª –ø–æ–ª—É—á–µ–Ω, –Ω–æ –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ—à–∏–±–∫—É: {http_err}') from http_err
        except httpx.RequestError as req_err:
            raise OpenAIConnectionError(f'`WSAnswerChatGPT`, –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {req_err}') from req_err
        except Exception as error:
            raise UnhandledError(f'–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ `WSAnswerChatGPT.httpx_request_to_openai()`: {error}') from error

    async def send_chunk_to_websocket(self, chunk, is_start=False, is_end=False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–æ–∫–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞ —Å—Ç–∞—Ç—É—Å —á–∞—Å—Ç–∏ –ø–æ—Ç–æ–∫–∞."""
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'chat.message',
                'message': chunk,
                'username': 'Eva',
                'is_stream': True,
                'is_start': is_start,
                'is_end': is_end,
            }
        )

    async def handle_error(self, err):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫."""
        error_message = f"–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ –°–∞–π—Ç-ChatGPT:\n{err}"
        bot.send_message(ADMIN_ID, error_message)

    async def create_history_ai(self):
        """–°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –ë–î."""
        history_instance = self.history_model(
            user=self.user if self.user.is_authenticated else None,
            room_group_name=self.room_group_name,
            question=self.query_text,
            question_tokens=self.query_text_tokens,
            answer=self.return_text,
            answer_tokens=self.return_text_tokens
        )
        await sync_to_async(history_instance.save)()

    def init_model_prompt(self):
        return (
            """
            Your name is Eva and are an experienced senior software developer with a strong background in team leadership, mentoring all developers, and delivering high-quality software solutions to clients.
            Your primary language is Russian. When formatting the text, please use only Markdown format.
            """
        )
