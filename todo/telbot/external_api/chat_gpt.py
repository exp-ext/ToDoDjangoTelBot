import asyncio
import os
from datetime import datetime, timedelta, timezone

import openai
from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from dotenv import load_dotenv
from telegram import ChatAction, Update
from telegram.ext import CallbackContext

from ..checking import check_registration
from ..models import HistoryAI

load_dotenv()

openai.api_key = os.getenv('CHAT_GP_TOKEN')

User = get_user_model()
ADMIN_ID = os.getenv('ADMIN_ID')

ERROR_TEXT = (
    '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑üèº\n'
    '–í–æ–∑–º–æ–∂–Ω–æ –±–æ–ª—å—à–æ–π –Ω–∞–ø–ª—ã–≤ –∑–∞–ø—Ä–æ—Å–æ–≤, '
    '–∫–æ—Ç–æ—Ä—ã–µ —è –Ω–µ —É—Å–ø–µ–≤–∞—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ü§Ø'
)


def add_history(history):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é."""
    prompt = []
    for item in history.exclude(answer__in=[None, ERROR_TEXT]):
        prompt.append({'role': 'user', 'content': item.question})
        prompt.append({'role': 'assistant', 'content': item.answer})
    return prompt


def get_answer_davinci(update: Update, context: CallbackContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API –ò–ò ChatGPT.
    –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑–≤–∞–≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    async def send_typing_periodically(chat_id: str,
                                       context: CallbackContext) -> None:
        """"
        TYPING –≤ —á–∞—Ç –¢–µ–ª–µ–≥—Ä–∞–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å.
        Args:
            (:obj:`str`) —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        Return:
            None
        """
        while True:
            try:
                context.bot.send_chat_action(
                    chat_id=chat_id,
                    action=ChatAction.TYPING
                )
                await asyncio.sleep(6)
            except asyncio.CancelledError:
                break

    async def request_to_openai(prompt: str) -> str:
        """
        –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ OpenAI.

        Args:
            (:obj:`str`) —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞

        Return:
            (:obj:`str`) –æ—Ç–≤–µ—Ç –ò–ò
        """
        # answer = openai.ChatCompletion.create(
        #     model='gpt-3.5-turbo',
        #     messages=prompt
        # )
        # answer_text = answer.choices[0].message.get('content')
        # –¥–ª—è —Ç–µ—Å—Ç–∞
        await asyncio.sleep(10)
        answer_text = '\n'.join([w.get('content') for w in prompt])
        return answer_text

    async def get_answer(prompt: list, chat_id: int, context: CallbackContext):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç 2 —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ openai

        Args:
            (:obj:`str`) —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            (:obj:`int`) ID —á–∞—Ç–∞ –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –≤—ã–∑–æ–≤
            (:obj:`CallbackContext`) CallbackContext
        Return
            (:obj:`str`): answer
        """
        task = asyncio.create_task(send_typing_periodically(chat_id, context))
        answer = await request_to_openai(prompt)
        task.cancel()
        return answer

    answers = {
        '?': ('–Ø –º–æ–≥ –±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –í–∞–º, –µ—Å–ª–∏ '
              f'[–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å]({context.bot.link}) üßê'),
        '!': ('–Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂—É –í–∞—à—É –¥–∏—Å–∫—É—Å—Å–∏—é, –µ—Å–ª–∏ '
              f'[–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å]({context.bot.link}) üôÉ'),
        '': ('–ö–∞–∫–∞—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –±–µ—Å–µ–¥–∞, [–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å]'
             f'({context.bot.link}) –∏ —è –ø–æ–¥–∫–ª—é—á—É—Å—å –∫ –Ω–µ–π üòá'),
    }
    if check_registration(update, context, answers) is False:
        return 'Bad register'

    chat_id = update.effective_chat.id
    user = get_object_or_404(
        User,
        username=update.effective_user.id
    )
    message_text = update.effective_message.text.replace('#', '', 1)

    this_datetime = datetime.now(timezone.utc)
    start_datetime = this_datetime - timedelta(minutes=5)
    history = user.history_ai.filter(
        created_at__range=[start_datetime, this_datetime]
    )
    answer_text = ''
    prompt = add_history(history) if history else []
    prompt.append({'role': 'user', 'content': message_text})

    try:
        answer = asyncio.run(get_answer(prompt, chat_id, context))

        if isinstance(answer, str):
            answer_text = answer if answer else ERROR_TEXT
            HistoryAI.objects.create(
                user=user,
                question=message_text,
                answer=answer.lstrip('\n')
            )
        else:
            answer_text = ERROR_TEXT

    except Exception as err:
        context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f'–û—à–∏–±–∫–∞ –≤ ChatGPT: {err}'
        )
    finally:
        context.bot.send_message(
            chat_id=chat_id,
            reply_to_message_id=update.message.message_id,
            text=answer_text
        )
    return 'Done'
