import os
import threading
import time
from datetime import datetime, timedelta, timezone

import openai
from django.contrib.auth import get_user_model
from django.db.models.query import QuerySet
from django.shortcuts import get_object_or_404
from dotenv import load_dotenv
from telegram import ChatAction, Update
from telegram.ext import CallbackContext

from ..checking import check_registration
from ..models import HistoryAI

load_dotenv()

openai.api_key = os.getenv('CHAT_GP_TOKEN')

User = get_user_model()
ADMIN_ID = os.getenv('ADMIN_ID')


class GetAnswerDavinci():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
    –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤ —á–∞—Ç Telegram –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞
    –æ—Ç API –ò–ò ChatGPT.
    """
    ERROR_TEXT = (
        '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑üèº\n'
        '–í–æ–∑–º–æ–∂–Ω–æ –±–æ–ª—å—à–æ–π –Ω–∞–ø–ª—ã–≤ –∑–∞–ø—Ä–æ—Å–æ–≤, '
        '–∫–æ—Ç–æ—Ä—ã–µ —è –Ω–µ —É—Å–ø–µ–≤–∞—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ü§Ø'
    )
    MODEL = 'gpt-3.5-turbo-0301'
    MAX_LONG_MESSAGE = 600
    MAX_LONG_REQUEST = 2049
    STORY_WINDOWS_TIME = 11
    MAX_TYPING_TIME = 10

    def __init__(self,
                 update: Update,
                 context: CallbackContext) -> None:
        self.update = update
        self.context = context
        self.user = None
        self.message_text = None
        self.current_time = None
        self.time_start = None
        self.set_user()
        self.set_message_text()
        self.set_windows_time()

    def get_answer_davinci(self) -> dict:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–ª–∞—Å—Å–∞."""

        if self.check_in_works():
            return {'code': 423}

        if check_registration(self.update,
                              self.context,
                              self.answers_for_check) is False:
            return {'code': 401}

        if self.check_long_query:
            answer_text = (
                f'{self.user.first_name}, —É –í–∞—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.'
                ' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∫–æ—Ä–æ—á–µ.'
            )
            self.send_message(
                text=answer_text,
                is_reply=True
            )
            return {'code': 400}
        try:
            answer = self.get_answer()
            answer_text = answer if answer else GetAnswerDavinci.ERROR_TEXT
            HistoryAI.objects.update(
                user=self.user,
                question=self.message_text,
                answer=answer_text.lstrip('\n')
            )
        except Exception as err:
            self.send_message(
                text=f'–û—à–∏–±–∫–∞ –≤ ChatGPT: {err}',
                is_admin=True
            )
            answer_text = GetAnswerDavinci.ERROR_TEXT
        finally:
            self.send_message(
                text=answer_text,
                is_reply=True
            )
        return {'code': 200}

    def get_answer(self) -> str:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç 2 —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ openai
        """
        stop_event = threading.Event()
        typing = threading.Thread(
            target=self.send_typing_periodically,
            args=(stop_event,)
        )
        typing.start()
        answer = self.request_to_openai()
        stop_event.set()
        typing.join()
        return answer

    def send_typing_periodically(self, stop_event: threading.Event) -> None:
        """"
        –ü–µ—Ä–µ–¥–∞—ë—Ç TYPING –≤ —á–∞—Ç –¢–µ–ª–µ–≥—Ä–∞–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å.
        """
        time_stop = (
            datetime.now()
            + timedelta(minutes=GetAnswerDavinci.MAX_TYPING_TIME)
        )
        while not stop_event.is_set():
            self.context.bot.send_chat_action(
                chat_id=self.update.effective_chat.id,
                action=ChatAction.TYPING
            )
            time.sleep(2)
            if datetime.now() > time_stop:
                break

    def request_to_openai(self) -> str | QuerySet:
        """
        –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ OpenAI.
        """
        prompt = self.get_prompt()
        answer = openai.ChatCompletion.create(
            model=GetAnswerDavinci.MODEL,
            messages=prompt
        )
        answer_text = answer.choices[0].message.get('content')
        return answer_text

    def get_prompt(self) -> str | QuerySet:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç prompt –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI –∏ –º–æ–¥–µ–ª—å user.
        """
        history = (
            self.user.history_ai
            .filter(created_at__range=[self.time_start, self.current_time])
            .exclude(answer__in=[None, GetAnswerDavinci.ERROR_TEXT])
            .values('question', 'answer')
        )
        prompt = [
            {'role': 'system', 'content': "You are a helpful assistant."}
        ]
        count_value = 0
        for item in history:
            count_value += len(item['question']) + len(item['answer'])
            if (count_value + len(self.message_text)
                    >= GetAnswerDavinci.MAX_LONG_REQUEST):
                break
            prompt.extend([
                {'role': 'user', 'content': item['question']},
                {'role': 'assistant', 'content': item['answer']}
            ])
        prompt.append({'role': 'user', 'content': self.message_text})
        return prompt

    def send_message(self,
                     text,
                     is_admin: bool = False,
                     is_reply: bool = False):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç Telegram.
        args:
            text(:obj:`str`): —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            is_admin(:obj:`bool`): –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
            is_reply(:obj:`bool`): –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        params = {
            'chat_id': ADMIN_ID if is_admin else self.update.effective_chat.id,
            'text': text,
        }
        if is_reply:
            params['reply_to_message_id'] = self.update.message.message_id

        self.context.bot.send_message(**params)

    def check_in_works(self) -> bool:
        if (self.user
                .history_ai.filter(
                    created_at__range=[self.time_start, self.current_time],
                    question=self.message_text
                ).exists()):
            return True
        HistoryAI.objects.create(
            user=self.user,
            question=self.message_text,
            answer=GetAnswerDavinci.ERROR_TEXT
        )
        return False

    def set_user(self) -> None:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º  –∞—Ç—Ä–∏–±—É—Ç user."""
        self.user = get_object_or_404(
            User,
            username=self.update.effective_user.id
        )

    def set_message_text(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç message_text."""
        self.message_text = (
            self.update.effective_message.text.replace('#', '', 1)
        )

    def set_windows_time(self) -> None:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã current_time –∏ time_start."""
        self.current_time = datetime.now(timezone.utc)
        self.time_start = (
            self.current_time
            - timedelta(minutes=GetAnswerDavinci.STORY_WINDOWS_TIME)
        )

    @property
    def check_long_query(self) -> bool:
        return len(self.message_text) > GetAnswerDavinci.MAX_LONG_MESSAGE

    @property
    def answers_for_check(self):
        return {
            '?': ('–Ø –º–æ–≥ –±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –í–∞–º, –µ—Å–ª–∏ '
                  f'[–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å]({self.context.bot.link}) üßê'),
            '!': ('–Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂—É –í–∞—à—É –¥–∏—Å–∫—É—Å—Å–∏—é, –µ—Å–ª–∏ '
                  f'[–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å]({self.context.bot.link}) üôÉ'),
            '': ('–ö–∞–∫–∞—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –±–µ—Å–µ–¥–∞, [–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å]'
                 f'({self.context.bot.link}) –∏ —è –ø–æ–¥–∫–ª—é—á—É—Å—å –∫ –Ω–µ–π üòá'),
        }


def get_answer_davinci_public(update: Update, context: CallbackContext):
    GetAnswerDavinci(update, context).get_answer_davinci()


def get_answer_davinci_person(update: Update, context: CallbackContext):
    if update.effective_chat.type == 'private':
        GetAnswerDavinci(update, context).get_answer_davinci()
    return {'code': 406}
