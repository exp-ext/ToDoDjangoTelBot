import os
from datetime import datetime, timedelta, timezone

import openai
from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import CallbackContext

from ..checking import check_registration
from ..models import HistoryAI

load_dotenv()

openai.api_key = os.getenv('CHAT_GP_TOKEN')

User = get_user_model()
ADMIN_ID = os.getenv('ADMIN_ID')

ERROR_TEXT = (
        '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑üèº\n'
        '–í–æ–∑–º–æ–∂–Ω–æ –±–æ–ª—å—à–æ–π –Ω–∞–ø–ª—ã–≤ –∑–∞–ø—Ä–æ—Å–æ–≤, '
        '–∫–æ—Ç–æ—Ä—ã–µ —è –Ω–µ —É—Å–ø–µ–≤–∞—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ü§Ø'
    )


def add_history(history):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é."""
    prompt = ''
    count = 0
    for item in history:
        if count > 3:
            break
        if item.answer and item.answer != ERROR_TEXT:
            prompt += (
                f'- {item.question}\n- {item.answer}\n\n'
            )
        count += 1
    return prompt


def request_to_openai(prompt: str) -> str:
    """
    –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ OpenAI.

    –ù–∞ –≤—Ö–æ–¥–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç:
    - —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (:obj:`str`)

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    """

    try:
        answer = openai.Completion.create(
            engine='text-davinci-003',
            prompt=prompt,
            max_tokens=2048,
            temperature=0.3,
            frequency_penalty=0,
            presence_penalty=0
        )
        answer_text = answer.choices[0].text
        if not answer_text:
            raise ValueError("not text")
    except Exception:
        answer = openai.Completion.create(
            engine='text-davinci-003',
            prompt=prompt,
            max_tokens=2048,
            temperature=0.7,
            frequency_penalty=0,
            presence_penalty=0
        )
        answer_text = answer.choices[0].text
    finally:
        if not answer_text:
            raise ValueError("not text")
        return answer_text


def get_answer_davinci(update: Update, context: CallbackContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API –ò–ò ChatGPT.
    –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑–≤–∞–≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    answers = {
        '?': ('–Ø –º–æ–≥ –±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –í–∞–º, –µ—Å–ª–∏ '
              f'[–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å]({context.bot.link}) üßê'),
        '!': ('–Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂—É –í–∞—à—É –¥–∏—Å–∫—É—Å—Å–∏—é, –µ—Å–ª–∏ '
              f'[–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å]({context.bot.link}) üôÉ'),
        '':  ('–ö–∞–∫–∞—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –±–µ—Å–µ–¥–∞, [–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å]'
              f'({context.bot.link}) –∏ —è –ø–æ–¥–∫–ª—é—á—É—Å—å –∫ –Ω–µ–π üòá'),
    }

    if check_registration(update, context, answers) is False:
        return 'Bad register'

    chat = update.effective_chat
    user = get_object_or_404(
        User,
        username=update.effective_user.id
    )
    message_text = update.message.text.replace('#', '')

    this_datetime = datetime.now(timezone.utc)
    start_datetime = this_datetime - timedelta(minutes=5)
    history = user.history_ai.filter(
        created_at__range=[start_datetime, this_datetime]
    )
    prompt = ''
    if history:
        prompt = add_history(history)
    prompt += f'- {message_text}'

    try:
        answer = request_to_openai(prompt)

        HistoryAI.objects.create(
            user=user,
            question=message_text,
            answer=answer
        )
    except Exception as error:
        context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f'–û—à–∏–±–∫–∞ –≤ ChatGPT: {str(error)}'
        )
    finally:
        answer_text = answer if answer else ERROR_TEXT
        context.bot.send_message(
            chat_id=chat.id,
            reply_to_message_id=update.message.message_id,
            text=answer_text
        )
    return 'Done'
