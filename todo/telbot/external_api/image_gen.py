import os
import threading
import time
from datetime import datetime, timedelta

import openai
from django.contrib.auth import get_user_model
from dotenv import load_dotenv
from telegram import ChatAction, InputMediaPhoto, ParseMode, Update
from telegram.ext import CallbackContext, ConversationHandler

from ..checking import check_registration
from ..cleaner import remove_keyboard

load_dotenv()

APY_KEY = os.getenv('CHAT_GP_TOKEN')
openai.api_key = APY_KEY

ADMIN_ID = os.getenv('ADMIN_ID')

User = get_user_model()


class GetAnswerDallE():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
    –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤ —á–∞—Ç Telegram –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞
    –æ—Ç API –ò–ò Dall-E.
    """

    ERROR_TEXT = (
        '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑üèº\n'
        '–í–æ–∑–º–æ–∂–Ω–æ –±–æ–ª—å—à–æ–π –Ω–∞–ø–ª—ã–≤ –∑–∞–ø—Ä–æ—Å–æ–≤, '
        '–∫–æ—Ç–æ—Ä—ã–µ —è –Ω–µ —É—Å–ø–µ–≤–∞—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ü§Ø'
    )
    MAX_TYPING_TIME = 10

    def __init__(self,
                 update: Update,
                 context: CallbackContext) -> None:
        self.update = update
        self.context = context
        self.chat_id = None
        self.message_text = None
        self.set_message_text()
        self.set_chat_id()

    def get_image_dall_e(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–∏—é –∫–∞—Ä—Ç–∏–Ω–æ–∫ –æ—Ç –ê–ü–ò Dall-e 2.
        –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑–≤–∞–≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        """
        answers = {
            '': ('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è '
                 '[–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π]'
                 f'({self.context.bot.link})'),
        }

        del_id = self.context.user_data['image_gen']
        self.context.bot.delete_message(self.chat_id, del_id)

        if check_registration(self.update, self.context, answers) is False:
            return {'code': 401}
        try:

            media_group = self.get_answer()

        except Exception as err:
            self.send_message(
                text=f'–û—à–∏–±–∫–∞ –≤ ChatGPT: {err}',
                is_admin=True
            )
        finally:
            self.send_message(
                media_group=media_group,
                is_reply=True
            )
            return ConversationHandler.END

    def get_answer(self) -> list:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç 2 —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ openai
        """
        stop_event = threading.Event()
        typing = threading.Thread(
            target=self.send_typing_periodically,
            args=(stop_event,)
        )
        typing.start()
        answer = self.request_to_openai()
        stop_event.set()
        typing.join()
        return answer

    def send_typing_periodically(self, stop_event: threading.Event) -> None:
        """"
        –ü–µ—Ä–µ–¥–∞—ë—Ç TYPING –≤ —á–∞—Ç –¢–µ–ª–µ–≥—Ä–∞–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å.
        """
        time_stop = (
            datetime.now()
            + timedelta(minutes=GetAnswerDallE.MAX_TYPING_TIME)
        )
        while not stop_event.is_set():
            self.context.bot.send_chat_action(
                chat_id=self.chat_id,
                action=ChatAction.UPLOAD_PHOTO
            )
            time.sleep(2)
            if datetime.now() > time_stop:
                break

    def request_to_openai(self) -> list:
        """
        –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ OpenAI.
        """
        media_group = []
        response = openai.Image.create(
            prompt=self.message_text,
            n=5,
            size='1024x1024'
        )
        for number, url in enumerate(response['data']):
            media_group.append(
                InputMediaPhoto(media=url['url'], caption=f'Gen ‚Ññ {number}')
            )
        return media_group

    def send_message(self,
                     media_group: list = None,
                     text: str = None,
                     is_admin: bool = False,
                     is_reply: bool = False) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç Telegram.
        args:
            text(:obj:`str`): —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            media_group(:obj:`list`): —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            is_admin(:obj:`bool`): –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
            is_reply(:obj:`bool`): –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        params = {
            'chat_id': ADMIN_ID if is_admin else self.chat_id,
        }

        if is_reply:
            params['reply_to_message_id'] = self.update.message.message_id

        if text:
            params['text'] = text
            self.context.bot.send_message(**params)
            return None

        if media_group:
            params['media'] = media_group
            self.context.bot.send_media_group(**params)
            return None

        params['text'] = GetAnswerDallE.ERROR_TEXT
        self.context.bot.send_message(**params)

    def set_message_text(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç message_text."""
        self.message_text = (
            self.update.effective_message.text
        )

    def set_chat_id(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç chat_id."""
        self.chat_id = (
            self.update.effective_chat.id
        )


def first_step_get_image(update: Update, context: CallbackContext):
    chat = update.effective_chat
    req_text = (
        f'*{update.effective_user.first_name}*, '
        '–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ'
    )
    message_id = context.bot.send_message(
        chat.id,
        req_text,
        parse_mode=ParseMode.MARKDOWN
    ).message_id
    context.user_data['image_gen'] = message_id
    remove_keyboard(update, context)
    return 'image_gen'


def get_image_dall_e(update: Update, context: CallbackContext):
    GetAnswerDallE(update, context).get_image_dall_e()
