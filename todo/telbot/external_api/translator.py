import os

import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import CallbackContext

from ..checking import check_registration

load_dotenv()

X_RAPID_API_KEY = os.getenv('X_RAPID_API_KEY')


def translate(text: str, to_language: str) -> str:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
    - text (:obj:`str`) - —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    - to_language (:obj:`str`) - —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å API Microsoft Translator Text.
    """

    url = 'https://microsoft-translator-text.p.rapidapi.com/translate'

    querystring = {
        'to': to_language,
        'api-version': '3.0',
        'profanityAction': 'NoAction',
        'textType': 'plain',
        'suggestedFrom': 'ru'
    }

    payload = [{'Text': text}]
    headers = {
        'content-type': 'application/json',
        'X-RapidAPI-Key': X_RAPID_API_KEY,
        'X-RapidAPI-Host': 'microsoft-translator-text.p.rapidapi.com'
    }

    try:
        response = requests.post(
            url=url,
            json=payload,
            headers=headers,
            params=querystring
        )
        answer = response.json()[0].get('translations')[0].get('text')
    except Exception as error:
        raise KeyError(error)
    return answer


def send_translation(update: Update, context: CallbackContext):
    """
    –û–ø–∏—Å–∞–Ω–∏–µ.
    """
    answers = {
        '':  ('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–µ—Ä–µ–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è  '
              '[–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π]'
              f'({context.bot.link}).'),
    }
    if check_registration(update, context, answers) is False:
        return 'Bad register'

    chat = update.effective_chat
    mes = tuple(x.strip() for x in update.message.text.split('->'))

    if len(mes[0]) == 2 or len(mes[1]) == 2:
        param = (
            (mes[0], mes[1]) if len(mes[1]) == 2 else (mes[1], mes[0])
        )
        try:
            answer = translate(*param)
        except Exception:
            answer = '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–ª—É—á–∞–π –≤–æ–∑–Ω–∏–∫ ü§™, —Å–∫–æ—Ä–æ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è.'
    else:
        answer = '–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ üôÉ'

    context.bot.send_message(
        chat_id=chat.id,
        reply_to_message_id=update.message.message_id,
        text=answer
    )
    return 'Done'
