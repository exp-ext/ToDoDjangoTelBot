import asyncio
import os
from datetime import datetime, timedelta, timezone

import requests
from asgiref.sync import sync_to_async
from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from dotenv import load_dotenv
from langdetect import detect
from telegram import ChatAction, Update
from telegram.ext import CallbackContext

from ..checking import check_registration
from ..models import HistoryTranslation

load_dotenv()

X_RAPID_API_KEY = os.getenv('X_RAPID_API_KEY')

TOKEN_TRANSLATION_API = os.getenv('TOKEN_TRANSLATION_API')

User = get_user_model()

ADMIN_ID = os.getenv('ADMIN_ID')


class GetTranslation():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
    –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤ —á–∞—Ç Telegram –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    ERROR_TEXT = (
        '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑üèº\n'
        '–í–æ–∑–º–æ–∂–Ω–æ –±–æ–ª—å—à–æ–π –Ω–∞–ø–ª—ã–≤ –∑–∞–ø—Ä–æ—Å–æ–≤, '
        '–∫–æ—Ç–æ—Ä—ã–µ —è –Ω–µ —É—Å–ø–µ–≤–∞—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ü§Ø'
    )
    STORY_WINDOWS_TIME = 11
    MAX_TYPING_TIME = 10

    def __init__(self,
                 update: Update,
                 context: CallbackContext) -> None:
        self.update = update
        self.context = context
        self.user = None
        self.message_text = None
        self.desired_language = None
        self.message_language = None
        self.current_time = None
        self.time_start = None
        self.answer_text = None
        self.event = asyncio.Event()
        self.set_user()
        self.set_message_text()
        self.set_windows_time()

    def get_translation(self) -> dict:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞."""
        if self.check_in_works():
            return {'code': 423}

        try:
            asyncio.run(self.get_answer())

            HistoryTranslation.objects.update(
                user=self.user,
                message=self.message_text,
                translation=self.answer_text.lstrip('\n')
            )
        except Exception as err:
            self.context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f'–û—à–∏–±–∫–∞ –≤ ChatGPT: {err}',
            )
            self.answer_text = GetTranslation.ERROR_TEXT
        finally:
            self.context.bot.send_message(
                chat_id=self.update.effective_chat.id,
                text=self.answer_text,
                reply_to_message_id=self.update.message.message_id
            )

    async def get_answer(self) -> None:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç 2 —Ñ—É–Ω–∫—Ü–∏–∏.
        """
        asyncio.create_task(self.send_typing_periodically())
        await sync_to_async(self.request_to)()

    async def send_typing_periodically(self) -> None:
        """"
        –ü–µ—Ä–µ–¥–∞—ë—Ç TYPING –≤ —á–∞—Ç –¢–µ–ª–µ–≥—Ä–∞–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å.
        """
        time_stop = datetime.now() + timedelta(minutes=GetTranslation.MAX_TYPING_TIME)
        while not self.event.is_set():
            self.context.bot.send_chat_action(
                chat_id=self.update.effective_chat.id,
                action=ChatAction.TYPING
            )
            await asyncio.sleep(2)
            if datetime.now() > time_stop:
                break

    def request_to(self) -> None:
        """
        –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–∫–ª—é—á–∞–µ—Ç typing.
        """
        try:
            self.translate_translator()
        except Exception:
            self.deepl_translator()
        self.event.set()

    def translate_translator(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å API www.translate.com.
        """
        url = 'https://api.translate.com/translate/v1/mt'
        headers = {
            'Authorization': f'Bearer {TOKEN_TRANSLATION_API}',
        }
        payload = {
            'text': self.message_text,
            'source_language': self.message_language,
            'translation_language': self.desired_language
        }
        response = requests.post(
            url=url,
            headers=headers,
            json=payload
        )  # TODO –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ HTTPX –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫
        self.answer_text = response.json().get('data').get('translation')

    def deepl_translator(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å API DeepL Translator.
        """
        url = 'https://deepl-translator1.p.rapidapi.com/translate'
        querystring = {
            'text': self.message_text,
            'target_lang': self.desired_language
        }
        headers = {
            'X-RapidAPI-Key': X_RAPID_API_KEY,
            'X-RapidAPI-Host': 'deepl-translator1.p.rapidapi.com'
        }
        response = requests.get(
            url=url,
            headers=headers,
            params=querystring
        )
        self.answer_text = response.json().get('translations')[0].get('text')

    def check_in_works(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ—Ç –ª–∏ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        if self.user.history_translation.filter(created_at__range=[self.time_start, self.current_time], message=self.message_text).exists():
            return True
        HistoryTranslation.objects.create(
            user=self.user,
            message=self.message_text,
            translation=self.answer_text
        )
        return False

    def set_user(self) -> None:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º  –∞—Ç—Ä–∏–±—É—Ç user."""
        self.user = get_object_or_404(
            User,
            username=self.update.effective_user.username
        )

    def set_message_text(self) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã:
        message_text, desired_language, message_language.
        """
        text = tuple(
            x.strip() for x in self.update.message.text.split('->')
        )
        if len(text[1]) == 2:
            self.message_text = text[0]
            self.desired_language = text[1]
            self.message_language = detect(text[0])
            self.answer_text = GetTranslation.ERROR_TEXT
        else:
            self.answer_text = '–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ üôÉ'

    def set_windows_time(self) -> None:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã current_time –∏ time_start."""
        self.current_time = datetime.now(timezone.utc)
        self.time_start = (
            self.current_time
            - timedelta(minutes=GetTranslation.STORY_WINDOWS_TIME)
        )


def send_translation(update: Update, context: CallbackContext):
    answers_for_check = {
        '': (f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–µ—Ä–µ–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è [–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π]({context.bot.link}).'),
    }
    if check_registration(update, context, answers_for_check) is False:
        return {'code': 401}
    GetTranslation(update, context).get_translation()
