from typing import Any, Iterable

from django.conf import settings
from django.contrib.auth import get_user_model
from django.utils.timezone import now
from telbot.models import UserGptModels
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup,
                      KeyboardButton, ParseMode, ReplyKeyboardMarkup, Update)
from telegram.ext import CallbackContext
from users.views import Authentication, set_coordinates

from .checking import check_registration
from .cleaner import delete_messages_by_time

User = get_user_model()


def build_menu(buttons: Iterable[Any], n_cols: int,
               header_buttons=None,
               footer_buttons=None) -> list[Any]:
    """–§—É–Ω–∫—Ü–∏—è —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫"""
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, [header_buttons])
    if footer_buttons:
        menu.append[(footer_buttons)]
    return menu


def main_menu(update: Update, context: CallbackContext) -> None:
    """–ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ —ç–∫—Ä–∞–Ω."""
    chat = update.effective_chat
    message_thread_id = update.effective_message.message_thread_id
    user_name = update.effective_user.first_name

    answers = {
        '': (
            f'{update.effective_user.first_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ [–¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏]({context.bot.link}) üîÜ'
            if chat.type != 'private' else
            f'{update.effective_user.first_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start üîÜ'
        )
    }

    if check_registration(update, context, answers) is not False:
        button_list = [
            InlineKeyboardButton('üí¨ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='add_first_step'),
            InlineKeyboardButton('‚ùå —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='del_first_step'),
            InlineKeyboardButton('üöº –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ä–æ–∂–¥–µ–Ω–∏–π', callback_data='show_birthday'),
            InlineKeyboardButton('üìÖ –ø–ª–∞–Ω—ã –Ω–∞ –¥–∞—Ç—É', callback_data='show_first_step'),
            InlineKeyboardButton('üìù –≤—Å–µ –ø–ª–∞–Ω—ã', callback_data='show_all_notes'),
            InlineKeyboardButton('üé≠ –∞–Ω–µ–∫–¥–æ—Ç', callback_data='show_joke'),
            InlineKeyboardButton('üåÅ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é', callback_data='gen_image_first'),
        ]
        reply_markup = InlineKeyboardMarkup(build_menu(button_list, n_cols=2))

        menu_text = "* üí°  –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ  üí° *".center(25, " ") + "\n" + f"–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}".center(25, " ")

        context.bot.send_message(
            chat.id,
            menu_text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            message_thread_id=message_thread_id
        )


def private_menu(update: Update, context: CallbackContext) -> None:
    """–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ø–æ–≥–æ–¥—ã —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º"""
    chat = update.effective_chat

    answers = {
        '': f'{update.message.from_user.first_name}, —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start üîÜ'
    }

    user = check_registration(update, context, answers, return_user=True)
    if user:
        button_list = [
            InlineKeyboardButton('üåà –ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å', callback_data='weather_per_day'),
            InlineKeyboardButton('‚òîÔ∏è –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 4 –¥–Ω—è', callback_data='weather'),
            InlineKeyboardButton('üõ∞ –º–æ—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã', callback_data='my_position'),
            InlineKeyboardButton('üèÑ —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏', callback_data='show_festivals'),
        ]
        reply_markup = InlineKeyboardMarkup(build_menu(button_list, n_cols=1))

        menu_text = ('* üí°  –ú–ï–ù–Æ  üí° *'.center(28, '~'))
        context.bot.send_message(
            chat.id,
            menu_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        set_coordinates(update, context, user)


def ask_registration(update: Update, context: CallbackContext) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat = update.effective_chat
    first_name = update.message.from_user.first_name or '–î—Ä—É–≥'
    if chat.type == 'private':
        user = check_registration(update, context, {}, allow_unregistered=True, return_user=True)
        if not user.is_blocked_bot:
            return Authentication(update, context).register()

        button_list = [
            KeyboardButton('–º–µ–Ω—é –≥–µ–æ—Ñ—É–Ω–∫—Ü–∏–π üì°', request_location=True),
            KeyboardButton('—Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ üë©‚Äçüíª', request_contact=True),
        ]
        reply_markup = ReplyKeyboardMarkup(
            build_menu(button_list, n_cols=2),
            resize_keyboard=True
        )
        text = f'–ü—Ä–∏–≤–µ—Ç, {first_name}!\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å –¥–æ–≤–æ–ª—å–Ω—ã!'

        context.bot.send_message(
            chat_id=chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        Authentication(update, context).register()


def show_my_links(update: Update, context: CallbackContext):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞ –∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç."""
    chat = update.effective_chat
    message_thread_id = update.effective_message.message_thread_id
    button_list = [
        InlineKeyboardButton(text='–¢–µ–ª–µ–≥—Ä–∞–º–º', url=context.bot.link),
        InlineKeyboardButton(text='–í–µ–±—Å–∞–π—Ç', url=f'https://{settings.DOMAINPREFIX}.{settings.DOMAIN}/')
    ]
    reply_markup = InlineKeyboardMarkup(build_menu(button_list, n_cols=1))
    menu_text = '–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å–∏—Å—Ç–µ–º—ã -->'
    message_id = context.bot.send_message(
        chat.id,
        menu_text,
        reply_markup=reply_markup,
        message_thread_id=message_thread_id
    ).message_id
    delete_messages_by_time.apply_async(
        args=[chat.id, message_id],
        countdown=40
    )


def ask_auth(update: Update, context: CallbackContext) -> None:
    """–ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ."""
    chat = update.effective_chat
    answers = {
        '': '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É /start üîÜ'
    }
    user = check_registration(update, context, answers, return_user=True)
    if user and chat.type == 'private':
        Authentication(update, context, user).authorization()


def reset_bot_history(update: Update, context: CallbackContext) -> None:
    answers = {
        '': '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É /start üîÜ'
    }
    user = check_registration(update, context, answers, return_user=True)
    current_time = now()
    UserGptModels.objects.update_or_create(user=user, defaults={'time_start': current_time})
    context.bot.send_message(
        user.tg_id,
        '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞ üóë'
    )
