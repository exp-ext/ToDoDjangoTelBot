from datetime import datetime

from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler

from ..cleaner import remove_keyboard
from ..service_message import send_service_message
from .parse_message import TaskParse

User = get_user_model()


def first_step_dell(update: Update, context: CallbackContext):
    chat = update.effective_chat
    req_text = (
            f'*{update.effective_user.first_name}*, '
            '–≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏,\n'
            '–∏–ª–∏ del –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏'
        )
    message_id = context.bot.send_message(
        chat.id,
        req_text,
        parse_mode='Markdown'
    ).message_id
    context.user_data['del_message'] = message_id
    remove_keyboard(update, context)
    return 'del_note'


def del_notes(update: Update, context: CallbackContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –º–æ–¥–µ–ª–∏ Task."""
    chat = update.effective_chat

    user_id = update.message.from_user.id
    user = get_object_or_404(
        User,
        username=user_id
    )
    user_locally = user.locations.first()

    pars = TaskParse(update.message.text, user_locally.timezone)
    pars.parse_with_parameters()

    del_id = (context.user_data['del_message'], update.message.message_id)
    for id in del_id:
        context.bot.delete_message(chat.id, id)

    if pars.server_date:
        date_search = pars.user_date.date()
        tasks = user.tasks.filter(
            user_date=date_search,
            text__contains=pars.only_message[1:]
        )
        count = len(tasks)

        if count > 0:
            tasks.delete()
            reply_text = (
                f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏{"–µ" if count == 1 else "—è"} —Å —Ç–µ–∫—Å—Ç–æ–º '
                f'*<{pars.only_message}>*\n'
                '–Ω–∞ –¥–∞—Ç—É: '
                f'*{datetime.strftime(pars.user_date, "%d.%m.%Y")}*\n'
                f'–£–¥–∞–ª–µ–Ω{"–æ" if count == 1 else "—ã"} –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ'
                f'{"." if count==1 else "–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ "+str(count)+"—à—Ç."}'
            )
        else:
            reply_text = (
                f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ *<{pars.only_message}>*\n'
                '–Ω–∞ –¥–∞—Ç—É: '
                f'*{datetime.strftime(pars.user_date, "%d.%m.%Y")}*\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
            )
    else:
        reply_text = (
            f'*{update.message.from_user.first_name}*, '
            '–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —á—Ç–æ —ç—Ç–æ –∑–∞ –¥–∞—Ç–∞ üßê. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ üôÑ.'
        )

    send_service_message(chat.id, reply_text, 'Markdown')
    return ConversationHandler.END
