from datetime import datetime

import pytz
from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from telegram import ParseMode, Update
from telegram.ext import CallbackContext, ConversationHandler
from users.models import Group

from ..cleaner import remove_keyboard
from .parse_message import TaskParse

User = get_user_model()


def first_step_show(update: Update, context: CallbackContext):
    chat = update.effective_chat
    req_text = (
            f'*{update.effective_user.first_name}*, '
            '–≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –∑–∞–º–µ—Ç–∫–∏\n'
            '–∏–ª–∏ *end* –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏'
        )
    message_id = context.bot.send_message(
        chat.id,
        req_text,
        parse_mode='Markdown'
    ).message_id
    context.user_data['del_message'] = message_id
    remove_keyboard(update, context)
    return 'show_note'


def show_at_date(update: Update, context: CallbackContext):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –≤ —á–∞—Ç
    –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç private –∏–ª–∏ group.
    """
    chat = update.effective_chat
    user_id = update.effective_user.id
    user = get_object_or_404(
        User,
        username=user_id
    )
    user_locally = user.locations.first()

    pars = TaskParse(update.message.text, user_locally.timezone)
    pars.parse_without_parameters()

    try:
        del_id = (context.user_data['del_message'], update.message.message_id)
        for id in del_id:
            context.bot.delete_message(chat.id, id)
        show(update, context, pars.user_date)
    except Exception as error:
        raise KeyError(error)
    finally:
        return ConversationHandler.END


def show_all_notes(update: Update, context: CallbackContext):
    """–í—ã–≤–æ–¥–∏—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –≤ —á–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç private –∏–ª–∏ group."""
    remove_keyboard(update, context)
    show(update, context)


def show_birthday(update: Update, context: CallbackContext):
    """
    –í—ã–≤–æ–¥–∏—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —á–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç private –∏–ª–∏ group.
    """
    remove_keyboard(update, context)
    show(update, context, it_birthday=True)


def show(update: Update, context: CallbackContext,
         at_date: datetime = None, it_birthday: bool = False):
    """
    –û–±—â–∏–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –±–æ—Ç–∞:
        - update (`Update`)
        - context (`CallbackContext`)

    –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - at_date (`datetime`) = None, –¥–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞
        - it_birthday (`bool`) = False, –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π.
    """
    chat = update.effective_chat
    user_id = update.effective_user.id

    user = get_object_or_404(
            User,
            username=user_id
        )
    user_locally = user.locations.first()
    user_tz = pytz.timezone(user_locally.timezone)

    if chat.type == 'private':
        if at_date:
            tasks = user.tasks.filter(
                server_datetime__day=at_date.day,
                server_datetime__month=at_date.month
            )
        else:
            tasks = user.tasks.filter(it_birthday=it_birthday)
    else:
        group = get_object_or_404(
            Group,
            chat_id=chat.id
        )
        if at_date:
            tasks = group.tasks.filter(
                server_datetime__day=at_date.day,
                server_datetime__month=at_date.month
            )
        else:
            tasks = group.tasks.filter(it_birthday=it_birthday)

    notes = []

    for item in tasks:
        if item.it_birthday:
            utc_date = item.server_datetime
            user_date = utc_date.astimezone(user_tz)
            notes.append(
                f'{datetime.strftime(user_date, "%d.%m")} '
                f'- {item.text}'
            )
        else:
            if not at_date or item.server_datetime.year == at_date.year:
                utc_date = item.server_datetime
                user_date = utc_date.astimezone(user_tz)
                utc_remind = item.remind_at
                remind = utc_remind.astimezone(user_tz)
                user_time = datetime.strftime(user_date, "%H:%M")
                user_time = '' if user_time == '00:00' else f' –≤ {user_time} '
                notes.append(
                    f'{datetime.strftime(user_date, "%d.%m.%Y")} {user_time}'
                    f'- {item.text}\n'
                    '<b><i>- –Ω–∞–ø–æ–º–Ω—é –≤ '
                    f'{datetime.strftime(remind, "%H:%M")}—á</i></b>\n'
                )
    if tasks:
        if it_birthday:
            note_sort = (
                f'<strong>{update.effective_user.first_name}, '
                '–Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –î–Ω–µ–π –†–æ–∂–¥–µ–Ω–∏–π üéâ:</strong>\n'
            )
        else:
            note_sort = (
                f'<strong>{update.effective_user.first_name}, '
                '–≤ –ø–ª–∞–Ω–∞—Ö –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ üìú:</strong>\n\n'
            )
    else:
        if it_birthday:
            note_sort = (
                f'<strong>{update.effective_user.first_name}, '
                '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –æ –î–Ω—è—Ö –†–æ–∂–¥–µ–Ω–∏–π ü§∑üèº</strong>\n'
            )
        else:
            note_sort = (
                f'<strong>{update.effective_user.first_name}, '
                '—É –Ω–∞—Å –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –ø–ª–∞–Ω–æ–≤ üôÖüèº‚Äç‚ôÄÔ∏è</strong>\n'
            )
    for n in notes:
        note_sort = note_sort + f'{n}\n'

    context.bot.send_message(
        chat_id=chat.id,
        text=note_sort,
        parse_mode=ParseMode.HTML
    )
