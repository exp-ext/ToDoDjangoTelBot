import json
import secrets
import string
import uuid
from datetime import timedelta
from typing import Any, Dict, List, OrderedDict

import requests
from core.serializers import ModelDataSerializer
from django.conf import settings
from django.contrib.auth import get_user_model, login
from django.contrib.auth.decorators import login_required
from django.core.files import File
from django.core.files.base import ContentFile
from django.core.files.temp import NamedTemporaryFile
from django.db.models.query import QuerySet
from django.http import HttpRequest, HttpResponse, JsonResponse
from django.shortcuts import get_object_or_404, redirect, render
from django.utils import timezone
from django.views import View
from telbot.checking import UserRedisManager
from telbot.cleaner import delete_messages_by_time
from telegram import Update
from telegram.ext import CallbackContext
from timezonefinder import TimezoneFinder
from users.validators import HashCheck

from todo.celery import app

from .forms import ProfileForm
from .models import Location

User = get_user_model()
ADMIN_ID = settings.TELEGRAM_ADMIN_ID
redis_client = settings.REDIS_CLIENT


class Authentication:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ."""

    valid_time: int = 5

    def __init__(self, update, context, user=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞."""
        self.update = update
        self.context = context
        self.chat = update.effective_chat
        self.tg_user = update.effective_user
        self.user = user

    def register(self) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ."""
        try:
            self.user, created = self.get_user_by_telegram_id()

            delete_messages_by_time.apply_async(
                args=[self.chat.id, self.update.effective_message.message_id],
                countdown=0
            )

            if created or self.user.is_blocked_bot:
                self.user.set_password(self.get_password(length=15))
                self.save_user_location()

            validation_key = self.generate_validation_key()
            reply_text = self.compose_auth_link_message(validation_key, created)
            message_id = self.send_messages(reply_text)

            if self.context.args:
                self.send_url_by_user()

            self.user.is_blocked_bot = False

            self.user.validation_message_id = message_id
            self.user.save()

            user_manager = UserRedisManager()
            user_manager.set_user_in_redis(self.tg_user, self.user)

            if not self.user.image:
                self.add_profile_picture.apply_async(args=(self.tg_user.id, ModelDataSerializer.serialize(self.user),))

            return None
        except Exception as err:
            self.handle_registration_error(err)

    def authorization(self) -> Dict[str, Any]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            validation_key = self.generate_validation_key()
            reply_text = self.compose_auth_link_message(validation_key)
            message_id = self.send_messages(reply_text)
            self.user.validation_message_id = message_id
            self.user.save()

            if not self.user.image:
                self.add_profile_picture.apply_async(args=(self.tg_user.id, ModelDataSerializer.serialize(self.user),))

            return None
        except Exception as err:
            self.handle_authorization_error(err)

    def send_messages(self, reply_text: List[str]) -> int:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            message_id = self.update.message.reply_text(text=reply_text, parse_mode='Markdown').message_id
        except Exception:
            message_id = self.update.message.reply_text(text=reply_text).message_id

        lifetime = 60 * self.valid_time
        delete_messages_by_time.apply_async(
            args=[self.chat.id, message_id],
            countdown=lifetime
        )
        return message_id

    def get_user_by_telegram_id(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ."""
        user, created = User.objects.get_or_create(tg_id=self.tg_user.id, defaults={"username": self.tg_user.username})
        return user, created

    def send_url_by_user(self):
        user_uuid = self.context.args[0]
        redirect_url = redis_client.get(f'redirect_url_by_user_id:{user_uuid}')
        if redirect_url:
            redis_client.delete(f'redirect_url_by_user_id:{user_uuid}')
            redis_client.setex(f'redirect_url_by_user_id:{self.tg_user.id}', 600, redirect_url)

    def generate_validation_key(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        validation_key = self.get_password(length=28)
        self.user.validation_key = validation_key
        self.user.validation_key_time = timezone.now().astimezone(timezone.utc)
        return validation_key

    def compose_auth_link_message(self, validation_key: str, is_new_user: bool = False) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ."""
        if is_new_user:
            preview_text = (
                '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ "Your To-Do"! \n\nüéâüéâüéâ\n\n'
                '–ù–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –í—ã –Ω–∞–π–¥–µ—Ç–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö, –∫—Ç–æ —É–≤–ª–µ—á–µ–Ω –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º.\n\n'
                '–¢–∞–∫–∂–µ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º –ï–≤–æ–π –Ω–∞ –ª—é–±—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã.\n\n'
                '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∏ –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏–ª–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É. üìÖ\n\n'
                '–ò —ç—Ç–æ –¥–∞–ª–µ–∫–æ –Ω–µ –≤—Å–µ... –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!\n\n'
            )
        else:
            preview_text = ""
        auth_link = (
            f'–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ [—Å–∞–π—Ç–µ](https://www.{settings.DOMAIN}) –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n„Ä∞\n'
            f'‚úîÔ∏è [https://www.{settings.DOMAIN}/auth/](https://www.{settings.DOMAIN}/auth/login/tg/{self.tg_user.id}/{validation_key}/)\n„Ä∞'
        )
        return preview_text + auth_link

    def save_user_location(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        if not self.user.locations.exists():
            Location.objects.create(user=self.user, latitude=59.799, longitude=30.274)

    def handle_registration_error(self, err):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è c id-{self.tg_user.id} –∏ username-{self.tg_user.username}:\n{err}"
        self.context.bot.send_message(self.tg_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        self.context.bot.send_message(ADMIN_ID, error_message)

    def handle_authorization_error(self, err):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è c id-{self.tg_user.id} –∏ username-{self.tg_user.username}:\n{err}"
        self.context.bot.send_message(self.tg_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        self.context.bot.send_message(ADMIN_ID, error_message)

    @staticmethod
    def get_password(length: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π."""
        characters = string.ascii_letters + string.digits
        return ''.join(secrets.choice(characters) for _ in range(length))

    @staticmethod
    @app.task(ignore_result=True)
    def add_profile_picture(tg_user_id: int, user: OrderedDict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram."""
        user = ModelDataSerializer.deserialize(user)
        session = requests.Session()

        try:
            photos_url = f'https://api.telegram.org/bot{settings.TELEGRAM_TOKEN}/getUserProfilePhotos'
            photos_response = session.get(photos_url, params={'user_id': tg_user_id})
            photos_response.raise_for_status()
            photos_data = photos_response.json()
            if not photos_data['result']['photos']:
                return None

            file_id = photos_data['result']['photos'][0][0]['file_id']

            file_url = f'https://api.telegram.org/bot{settings.TELEGRAM_TOKEN}/getFile'
            file_response = session.get(file_url, params={'file_id': file_id})
            file_response.raise_for_status()
            file_path = file_response.json()['result']['file_path']

            photo_url = f'https://api.telegram.org/file/bot{settings.TELEGRAM_TOKEN}/{file_path}'
            photo_response = session.get(photo_url)
            photo_response.raise_for_status()

            file_name = f"{uuid.uuid4()}.jpg"
            user.image.save(file_name, ContentFile(photo_response.content))

        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è c tg_id {tg_user_id}: {e}")

        finally:
            session.close()


class LoginTgLinkView(View):
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º.

    ### Attributes:
    - valid_time (`int`): –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö.

    ### Methods:
    - get: –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º.

    """
    valid_time: int = 10

    def get(self, request: HttpRequest, user_id: str, key: str) -> HttpRequest:
        """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º.

        ### Args:
        - request (HttpRequest): HTTP-–∑–∞–ø—Ä–æ—Å.
        - user_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º.
        - key (str): –ö–ª—é—á –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

        ### Returns:
        - HttpRequest: HTTP-–æ—Ç–≤–µ—Ç.

        """
        user_id = int(user_id)
        key = str(key)
        user = User.objects.filter(tg_id=user_id).first()
        if not user:
            return redirect('index')

        time_difference = timezone.now().astimezone(timezone.utc) - user.validation_key_time
        if user.validation_key == key and time_difference < timedelta(minutes=self.valid_time):
            login(request, user)
            user.validation_key = None
            user.save()
            delete_messages_by_time.apply_async(
                args=[user_id, user.validation_message_id],
                countdown=5
            )

        url = self.get_url_from_redis(user_id) or 'index'
        return redirect(url)

    def get_url_from_redis(self, user_id):
        url = redis_client.get(f'redirect_url_by_user_id:{user_id}')
        if not url:
            return None
        redis_client.delete(f'redirect_url_by_user_id:{user_id}')
        return json.loads(url)


class LoginTgButtonView(View):

    def get(self, request: HttpRequest) -> HttpRequest:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON —Å URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –¢–µ–ª–µ–≥—Ä–∞–º–º."""
        user_id = uuid.uuid4()
        telegram_url = f'https://t.me/{settings.TELEGRAM_BOT_NAME}?start={user_id}'
        referer_url = request.META.get('HTTP_REFERER')
        redis_client.setex(f'redirect_url_by_user_id:{str(user_id)}', 300, json.dumps(referer_url))
        return JsonResponse({'url': telegram_url})


@login_required
def accounts_profile(request: HttpRequest, username: str) -> HttpResponse:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    ### Args:
    - request (`HttpRequest`): HTTP-–∑–∞–ø—Ä–æ—Å.
    - username (`str`): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    ### Returns:
    - HttpResponse: HTTP-–æ—Ç–≤–µ—Ç.

    """
    user = get_object_or_404(User.objects, username=username)
    if user != request.user:
        redirect('index')

    form = ProfileForm(
        request.POST or None,
        files=request.FILES or None,
        instance=user
    )

    if request.method == "POST" and form.is_valid():
        user = form.save()
        return redirect('accounts_profile', username=username)

    context = {
        'user': user,
        'form': form,
    }
    template = 'users/accounts_profile.html'
    return render(request, template, context)


def get_coordinates(tg_id: int) -> QuerySet[Location]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    ### Args:
    - tg_id (`int`) - –¢–µ–ª–µ–≥—Ä–∞–º–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    ### Returns:
    - `QuerySet[Location]`:
        - latitude (:obj:`float`)
        - longitude (:obj:`float`)
        - timezone (:obj:`str`)
    """
    user = User.objects.filter(tg_id=tg_id).first()
    return user.locations.first() if user else None


def set_coordinates(update: Update, _: CallbackContext, user: QuerySet = None) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø–∏—Å—å –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    ### Args:
    - update (`Update`): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ Telegram.
    - context (`CallbackContext`): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.

    ### Returns:
    - None
    """
    chat = update.effective_chat
    user_id = chat.id
    latitude = update.message.location.latitude
    longitude = update.message.location.longitude
    if not user:
        user = User.objects.filter(tg_id=user_id).first()

    if user:
        tf = TimezoneFinder()
        timezone_str = tf.timezone_at(lng=longitude, lat=latitude)
        Location.objects.create(
            user=user,
            latitude=latitude,
            longitude=longitude,
            timezone=timezone_str
        )


def block(request: HttpRequest) -> HttpResponse:
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

    ### Args:
    - request (`HttpRequest`): HTTP-–∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.

    ### Returns:
    - HttpResponse: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.

    """
    text = f'–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {int(settings.DEFENDER_COOLOFF_TIME/60)} –º–∏–Ω—É—Ç!'
    context = {
        'text': text,
    }
    template = 'users/block.html'
    return render(request, template, context)


class LoginTgView(View):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram –≤–∏–¥–∂–µ—Ç.
    """

    def get(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpRequest:
        """–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑-–∑–∞ cookies"""
        data = request.GET
        if not HashCheck(data).check_hash():
            return render(request, 'users/error.html', {'msg': 'Bad hash!'})

        photo_url = data.get('photo_url', None)
        keys = {'tg_id': 'id', 'username': 'username', 'first_name': 'first_name', 'last_name': 'last_name'}
        user_info = {k: data.get(v) for k, v in keys.items() if data.get(v) is not None}

        response = requests.get(photo_url, timeout=5)
        if response.status_code == 200:
            temp_file = NamedTemporaryFile(delete=True)
            temp_file.write(response.content)
            temp_file.flush()

        user, status = User.objects.get_or_create(tg_id=user_info.pop('tg_id'))
        if status:
            user.set_password(Authentication.get_password())

        for key, value in user_info.items():
            setattr(user, key, value)
        user.image.save(f'{uuid.uuid4}.jpg', File(temp_file))
        user.save()
        temp_file.close()
        login(request, user)
        return redirect('index')
