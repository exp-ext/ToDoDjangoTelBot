import secrets
import string
import uuid
from datetime import timedelta
from typing import Any, Dict, OrderedDict

import requests
from core.serializers import ModelDataSerializer
from django.conf import settings
from django.contrib.auth import get_user_model, login
from django.contrib.auth.decorators import login_required
from django.core.files import File
from django.core.files.temp import NamedTemporaryFile
from django.db.models.query import QuerySet
from django.http import HttpRequest, HttpResponse, JsonResponse
from django.shortcuts import get_object_or_404, redirect, render
from django.utils import timezone
from django.views import View
from telbot.checking import UserRedisManager
from telbot.cleaner import delete_messages_by_time
from telegram import Update
from telegram.ext import CallbackContext
from timezonefinder import TimezoneFinder
from users.validators import HashCheck

from todo.celery import app

from .forms import ProfileForm
from .models import Location

User = get_user_model()
ADMIN_ID = settings.TELEGRAM_ADMIN_ID


class Authentication:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ.

    ### Attributes:
    - valid_time (`int`): –í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

    ### Methods:
    - __init__(self, update: Update, context: CallbackContext): –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞.
    - register(self) -> Dict[str, Any]: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - authorization(self) -> Dict[str, Any]: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - send_messages(self, reply_text): –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    - check_chat_type(self): –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    """
    valid_time: int = 5

    def __init__(self, update: Update, context: CallbackContext, user: User = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞.

        ### Args:
            update (`Update`): –û–±—ä–µ–∫—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π Telegram Update.
            context (`CallbackContext`): –û–±—ä–µ–∫—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç Callback Query.

        """
        self.update = update
        self.context = context
        self.chat = update.effective_chat
        self.tg_user = update.effective_user
        self.user = user

    def register(self) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ.

        ### Returns:
        - Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        """
        if self.check_chat_type():
            return JsonResponse({"error": "Chat type not private."})

        try:
            validation_key = self.get_password(length=28)
            self.user, _ = User.objects.get_or_create(tg_id=self.tg_user.id)
            self.user.username = self.tg_user.username or f'n-{str(1010101 + self.user.id)[::-1]}'
            self.user.first_name = self.tg_user.first_name or self.tg_user.username
            self.user.last_name = self.tg_user.last_name
            self.user.is_blocked_bot = False
            self.user.validation_key = validation_key
            self.user.validation_key_time = timezone.now().astimezone(timezone.utc)

            user_manager = UserRedisManager()
            user_manager.set_user_in_redis(self.tg_user, self.user)

            if not self.user.image:
                self.add_profile_picture.apply_async(args=(self.tg_user.id, ModelDataSerializer.serialize(self.user),))
            password = self.get_password(length=15)
            self.user.set_password(password)
            reply_text = [
                '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ Your To-Do.\n'
                '–ù–∏–∂–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n'
                '‚§µÔ∏è\n',
                f'{self.tg_user.username}\n',
                f'{password}\n',
                f'–î–ª—è –±—ã—Å—Ç—Ä–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ [—Å–∞–π—Ç–µ](https://www.{settings.DOMAIN}) –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n„Ä∞\n'
                f'‚úîÔ∏è [https://www.{settings.DOMAIN}/auth/](https://www.{settings.DOMAIN}/auth/login/tg/{self.tg_user.id}/{validation_key}/)\n„Ä∞'
            ]
            message_id = self.send_messages(reply_text)
            self.user.validation_message_id = message_id
            self.user.save()
        except Exception as err:
            user_error_message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º üí°. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            self.context.bot.send_message(self.tg_user.id, user_error_message)
            error_message = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è c id-{self.tg_user.id} –∏ username-{self.tg_user.username}:\n{err}'
            self.context.bot.send_message(ADMIN_ID, error_message)

        if not self.user.locations.exists():
            Location.objects.create(
                user=self.user,
                latitude=59.799,
                longitude=30.274
            )
        return JsonResponse({"ok": "User created."})

    def authorization(self) -> Dict[str, Any]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        ### Returns:
        - Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        """
        if self.check_chat_type():
            return JsonResponse({"error": "Chat type not private."})

        validation_key = self.get_password(length=28)

        # if not self.user:
        #     self.user = User.objects.filter(
        #         tg_id=self.tg_user.id,
        #         username=self.tg_user.username
        #     ).first()

        if not self.user.image:
            self.add_profile_picture.apply_async(args=(self.tg_user.id, ModelDataSerializer.serialize(self.user),))

        self.user.first_name = self.tg_user.first_name
        self.user.last_name = self.tg_user.last_name

        if User.objects.filter(phone_number=self.update.message.contact.phone_number).exclude(id=self.user.id).exists():
            reply_text = (
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'
                '–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–± —ç—Ç–æ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É - https://t.me/Borokin'
            )
            self.context.bot.send_message(self.chat.id, reply_text)
        else:
            self.user.phone_number = self.update.message.contact.phone_number

        self.user.validation_key = validation_key
        self.user.validation_key_time = timezone.now().astimezone(timezone.utc)
        reply_text = [
            f'–î–ª—è –±—ã—Å—Ç—Ä–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ [—Å–∞–π—Ç–µ](https://www.{settings.DOMAIN}) –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n„Ä∞\n'
            f'‚úîÔ∏è [https://www.{settings.DOMAIN}/auth/](https://www.{settings.DOMAIN}/auth/login/tg/{self.tg_user.id}/{validation_key}/)\n„Ä∞'
        ]
        message_id = self.send_messages(reply_text)
        self.user.validation_message_id = message_id
        try:
            self.user.save()
        except Exception as err:
            delete_messages_by_time.apply_async(
                args=[self.chat.id, message_id],
                countdown=0
            )
            reply_text = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º üí°.'
            self.context.bot.send_message(self.chat.id, reply_text)
            error_message = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è c id-{self.tg_user.id} –∏ username-{self.tg_user.username}:\n{err}'
            self.context.bot.send_message(ADMIN_ID, error_message)

        return JsonResponse({"ok": "Link sent."})

    def send_messages(self, reply_text) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        ### Args:
        - reply_text (`List`): –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.

        ### Returns:
        - int: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

        """
        for text in reply_text:
            try:
                message_id = self.update.message.reply_text(text=text, parse_mode='Markdown').message_id
            except Exception:
                message_id = self.update.message.reply_text(text=text).message_id

        lifetime = 60 * self.valid_time
        delete_messages_by_time.apply_async(
            args=[self.chat.id, message_id],
            countdown=lifetime
        )
        return message_id

    def check_chat_type(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        ### Returns:
            bool: True, –µ—Å–ª–∏ —Ç–∏–ø —á–∞—Ç–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è "private", –∏–Ω–∞—á–µ False.

        """
        if self.chat.type != 'private':
            message_id = self.context.bot.send_message(
                self.chat.id,
                f'{self.tg_user.first_name}, '
                '—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ "private"'
            ).message_id
            delete_messages_by_time.apply_async(args=[self.chat.id, message_id], countdown=20)
            return True
        return False

    @staticmethod
    def get_password(length):
        """
        –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π.

        ### Args:
        - length (`int`): –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è.

        ### Returns:
        - `str`: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å.

        """
        character_set = string.digits + string.ascii_letters
        return ''.join(secrets.choice(character_set) for _ in range(length))

    @staticmethod
    @app.task(ignore_result=True)
    def add_profile_picture(tg_user_id: int, user: OrderedDict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è —é–∑–µ—Ä–∞.

        ### Args:
        - tg_user_id (`int`): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
        - user (`OrderedDict`): –°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        """
        user = ModelDataSerializer.deserialize(user)
        url = f'https://api.telegram.org/bot{settings.TELEGRAM_TOKEN}/getUserProfilePhotos'
        params = {'user_id': tg_user_id}
        response = requests.get(url, params=params)
        data = response.json()

        if response.status_code == 200:
            file_id = data['result']['photos'][0][0]['file_id']
            url = f'https://api.telegram.org/bot{settings.TELEGRAM_TOKEN}/getFile'
            params = {
                'file_id': file_id
            }
            response = requests.get(url, params=params)
            data = response.json()
            if response.status_code == 200:
                file_path = data['result']['file_path']
                file_url = f'https://api.telegram.org/file/bot{settings.TELEGRAM_TOKEN}/{file_path}'
                response = requests.get(file_url)
                if response.status_code == 200:
                    temp_file = NamedTemporaryFile(delete=True)
                    temp_file.write(response.content)
                    temp_file.flush()
                    user.image.save(f'{uuid.uuid4}.jpg', File(temp_file))
                    temp_file.close()


class LoginTgView(View):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram –≤–∏–¥–∂–µ—Ç.

    ### Methods:
        post(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpRequest: –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

    """

    def post(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpRequest:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

        ### Args:
        - request (`HttpRequest`): HTTP-–∑–∞–ø—Ä–æ—Å.
        - *args: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
        - **kwargs: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.

        ### Returns:
        - HttpRequest: HTTP-–æ—Ç–≤–µ—Ç.

        """
        data = request.GET
        if not HashCheck(data).check_hash():
            return render(request, 'users/error.html', {'msg': 'Bad hash!'})

        photo_url = data.pop('photo_url')
        response = requests.GET.get(photo_url)

        if response.status_code == 200:
            temp_file = NamedTemporaryFile(delete=True)
            temp_file.write(response.content)
            temp_file.flush()

        user, status = User.objects.get_or_create(**data)
        if status:
            user.set_password(Authentication.get_password())
        user.image.save(f'{uuid.uuid4}.jpg', File(temp_file))
        user.save()
        temp_file.close()
        login(request, user)
        return redirect('index')


class LoginTgLinkView(View):
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º.

    ### Attributes:
    - valid_time (`int`): –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö.

    ### Methods:
    - get: –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º.

    """
    valid_time: int = 10

    def get(self, request: HttpRequest, user_id: str, key: str, *args: Any, **kwargs: Any) -> HttpRequest:
        """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º.

        ### Args:
        - request (HttpRequest): HTTP-–∑–∞–ø—Ä–æ—Å.
        - user_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º.
        - key (str): –ö–ª—é—á –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
        - *args: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
        - **kwargs: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.

        ### Returns:
        - HttpRequest: HTTP-–æ—Ç–≤–µ—Ç.

        """
        user_id = int(user_id)
        key = str(key)
        user = User.objects.filter(tg_id=user_id).first()
        if not user:
            return redirect('index')

        time_difference = timezone.now().astimezone(timezone.utc) - user.validation_key_time
        if user.validation_key == key and time_difference < timedelta(minutes=self.valid_time):
            login(request, user)
            user.validation_key = None
            user.save()
            delete_messages_by_time.apply_async(
                args=[user_id, user.validation_message_id],
                countdown=5
            )
        return redirect('index')


@login_required
def accounts_profile(request: HttpRequest, username: str) -> HttpResponse:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    ### Args:
    - request (`HttpRequest`): HTTP-–∑–∞–ø—Ä–æ—Å.
    - username (`str`): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    ### Returns:
    - HttpResponse: HTTP-–æ—Ç–≤–µ—Ç.

    """
    user = get_object_or_404(User.objects, username=username)
    if user != request.user:
        redirect('index')

    form = ProfileForm(
        request.POST or None,
        files=request.FILES or None,
        instance=user
    )

    if request.method == "POST" and form.is_valid():
        user = form.save()
        return redirect('accounts_profile', username=username)

    context = {
        'user': user,
        'form': form,
    }
    template = 'users/accounts_profile.html'
    return render(request, template, context)


def get_coordinates(tg_id: int) -> QuerySet[Location]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    ### Args:
    - tg_id (`int`) - –¢–µ–ª–µ–≥—Ä–∞–º–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    ### Returns:
    - `QuerySet[Location]`:
        - latitude (:obj:`float`)
        - longitude (:obj:`float`)
        - timezone (:obj:`str`)
    """
    user = User.objects.filter(tg_id=tg_id).first()
    return user.locations.first() if user else None


def set_coordinates(update: Update, _: CallbackContext, user: User = None) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø–∏—Å—å –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    ### Args:
    - update (`Update`): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ Telegram.
    - context (`CallbackContext`): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.

    ### Returns:
    - None
    """
    chat = update.effective_chat
    user_id = chat.id
    latitude = update.message.location.latitude
    longitude = update.message.location.longitude
    if not user:
        user = User.objects.filter(tg_id=user_id).first()

    if user:
        tf = TimezoneFinder()
        timezone_str = tf.timezone_at(lng=longitude, lat=latitude)
        Location.objects.create(
            user=user,
            latitude=latitude,
            longitude=longitude,
            timezone=timezone_str
        )


def block(request: HttpRequest) -> HttpResponse:
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

    ### Args:
    - request (`HttpRequest`): HTTP-–∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.

    ### Returns:
    - HttpResponse: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.

    """
    text = f'–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {int(settings.DEFENDER_COOLOFF_TIME/60)} –º–∏–Ω—É—Ç!'
    context = {
        'text': text,
    }
    template = 'users/block.html'
    return render(request, template, context)
